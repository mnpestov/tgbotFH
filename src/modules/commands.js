const { mainMenu } = require('./keyboards');
const { Markup } = require('telegraf');
const { TARIFFS, formatRub } = require('../services/payment');
const provider = require('../services/providers/sbpMock');
const { createOrder } = require('../services/orderService');
const logger = require('../shared/logger');

function registerCommands(bot) {
  bot.command('menu', (ctx) => ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:', mainMenu()));
  bot.help((ctx) => ctx.reply('–î–æ—Å—Ç—É–ø–Ω–æ: /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤.'));

  // 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤ ‚Üí –æ–ø–∏—Å–∞–Ω–∏–µ + "–û–ø–ª–∞—Ç–∏—Ç—å" (–ø–µ—Ä–≤—ã–π —à–∞–≥)
  bot.hears('–¢–∞—Ä–∏—Ñ –ë–∞–∑–æ–≤—ã–π', (ctx) => {
    const t = TARIFFS.BASIC;
    return ctx.reply(
      `üì¶ *${t.title}*\n\n‚Äî –û–ø–∏—Å–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞\n‚Äî –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç\n‚Äî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è\n\n–¶–µ–Ω–∞: ${formatRub(t.amount)}`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', 'PAY_BASIC_STEP1')
        ])
      }
    );
  });

  bot.hears('–¢–∞—Ä–∏—Ñ –ü—Ä–æ', (ctx) => {
    const t = TARIFFS.PRO;
    return ctx.reply(
      `üöÄ *${t.title}*\n\n‚Äî –û–ø–∏—Å–∞–Ω–∏–µ PRO —Ç–∞—Ä–∏—Ñ–∞\n‚Äî –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç\n‚Äî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è\n\n–¶–µ–Ω–∞: ${formatRub(t.amount)}`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', 'PAY_PRO_STEP1')
        ])
      }
    );
  });

  // 2) –ù–∞ "–û–ø–ª–∞—Ç–∏—Ç—å" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏—Ç—å + <—Å—É–º–º–∞>" (–≤—Ç–æ—Ä–æ–π —à–∞–≥)
  bot.action('PAY_BASIC_STEP1', async (ctx) => {
    await ctx.answerCbQuery();
    const t = TARIFFS.BASIC;
    return ctx.reply(
      `üßæ *–ó–∞–∫–∞–∑*\n\n–¢–∞—Ä–∏—Ñ: ${t.title}\n–°—É–º–º–∞: ${formatRub(t.amount)}\n\n–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã.`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          Markup.button.callback(`–û–ø–ª–∞—Ç–∏—Ç—å ${formatRub(t.amount)}`, 'PAY_BASIC_STEP2')
        ])
      }
    );
  });

  bot.action('PAY_PRO_STEP1', async (ctx) => {
    await ctx.answerCbQuery();
    const t = TARIFFS.PRO;
    return ctx.reply(
      `üßæ *–ó–∞–∫–∞–∑*\n\n–¢–∞—Ä–∏—Ñ: ${t.title}\n–°—É–º–º–∞: ${formatRub(t.amount)}\n\n–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã.`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          Markup.button.callback(`–û–ø–ª–∞—Ç–∏—Ç—å ${formatRub(t.amount)}`, 'PAY_PRO_STEP2')
        ])
      }
    );
  });

  // 3) –ù–∞ "–û–ø–ª–∞—Ç–∏—Ç—å + <—Å—É–º–º–∞>" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º QR (–¥–µ–º–æ SBP)
  // bot.action('PAY_BASIC_STEP2', async (ctx) => {
  //   await ctx.answerCbQuery();
  //   const t = TARIFFS.BASIC;
  //   const orderId = `ORD-${Date.now()}`;
  //   const payload = buildDemoSbpPayload({ orderId, tariff: t });
  //   const png = await makeQrPngBuffer(payload);

  //   await ctx.replyWithPhoto({ source: png }, {
  //     caption: `üîó –î–µ–º–æ‚ÄëQR –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –°–ë–ü\n–ó–∞–∫–∞–∑: *${orderId}*\n–¢–∞—Ä–∏—Ñ: *${t.title}*\n–°—É–º–º–∞: *${formatRub(t.amount)}*\n\n*–í–ù–ò–ú–ê–ù–ò–ï:* —ç—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π QR. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—Å—è —Å –±–∞–Ω–∫–æ–º/—ç–∫–≤–∞–π–µ—Ä–æ–º –°–ë–ü.`,
  //     parse_mode: 'Markdown'
  //   });
  // });

  // bot.action('PAY_PRO_STEP2', async (ctx) => {
  //   await ctx.answerCbQuery();
  //   const t = TARIFFS.PRO;
  //   const orderId = `ORD-${Date.now()}`;
  //   const payload = buildDemoSbpPayload({ orderId, tariff: t });
  //   const png = await makeQrPngBuffer(payload);

  //   await ctx.replyWithPhoto({ source: png }, {
  //     caption: `üîó –î–µ–º–æ‚ÄëQR –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –°–ë–ü\n–ó–∞–∫–∞–∑: *${orderId}*\n–¢–∞—Ä–∏—Ñ: *${t.title}*\n–°—É–º–º–∞: *${formatRub(t.amount)}*\n\n*–í–ù–ò–ú–ê–ù–ò–ï:* —ç—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π QR. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—Å—è —Å –±–∞–Ω–∫–æ–º/—ç–∫–≤–∞–π–µ—Ä–æ–º –°–ë–ü.`,
  //     parse_mode: 'Markdown'
  //   });
  // });

  bot.action('PAY_BASIC_STEP2', async (ctx) => {
    await ctx.answerCbQuery();
    try {
      const t = TARIFFS.BASIC;
      const { providerOrderId, qrPng } = await provider.createInvoice({ tariffCode: t.code, amountKopecks: t.amount });
      logger.info({ providerOrderId, tariff: t.code, user: ctx.from.id }, 'invoice created');

      await createOrder({
        tgUserId: ctx.from.id.toString(),
        chatId: ctx.chat.id.toString(),             // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º chatId
        tariffCode: t.code,
        amountKopecks: t.amount,
        provider: process.env.PROVIDER_NAME || 'sbpMock',
        providerOrderId
      });

      await ctx.replyWithPhoto({ source: qrPng }, {
        caption: `üîó QR –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –°–ë–ü\n–¢–∞—Ä–∏—Ñ: *${t.title}*\n–°—É–º–º–∞: *${formatRub(t.amount)}*\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
        parse_mode: 'Markdown'
      });
    } catch (err) {
      console.error('PAY_BASIC_STEP2 error:', err);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  });

  bot.action('PAY_PRO_STEP2', async (ctx) => {
    await ctx.answerCbQuery();
    try {
      const t = TARIFFS.PRO;
      const { providerOrderId, qrPng } = await provider.createInvoice({ tariffCode: t.code, amountKopecks: t.amount });
      logger.info({ providerOrderId, tariff: t.code, user: ctx.from.id }, 'invoice created');

      await createOrder({
        tgUserId: ctx.from.id.toString(),
        chatId: ctx.chat.id.toString(),             // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º chatId
        tariffCode: t.code,
        amountKopecks: t.amount,
        provider: process.env.PROVIDER_NAME || 'sbpMock',
        providerOrderId
      });

      await ctx.replyWithPhoto({ source: qrPng }, {
        caption: `üîó QR –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –°–ë–ü\n–¢–∞—Ä–∏—Ñ: *${t.title}*\n–°—É–º–º–∞: *${formatRub(t.amount)}*\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
        parse_mode: 'Markdown'
      });
    } catch (err) {
      console.error('PAY_PRO_STEP2 error:', err);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  });
}

module.exports = { registerCommands };
